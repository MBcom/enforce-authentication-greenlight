

cache:
  paths:
    - /cache


variables:
  # KUBE_INGRESS_BASE_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.

  POSTGRES_USER: greenlight
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG
  K8S_SECRET_DB_HOST: ${CI_ENVIRONMENT_SLUG}-postgresql
  K8S_SECRET_DB_NAME: $POSTGRES_DB
  K8S_SECRET_DB_USERNAME: $POSTGRES_USER
  K8S_SECRET_DB_PASSWORD: $POSTGRES_PASSWORD
  K8S_SECRET_DEFAULT_REGISTRATION: approval
  K8S_SECRET_ROOM_FEATURES: "mute-on-join,require-moderator-approval,anyone-can-start,all-join-moderator"
  K8S_SECRET_RELATIVE_URL_ROOT: "/"
  K8S_SECRET_ALLOW_MAIL_NOTIFICATIONS: "true"



  production_ADDITIONAL_HOSTS: $production_fqdn
  review_ADDITIONAL_HOSTS: $review_fqdn


  DOCKER_DRIVER: overlay2

  ROLLOUT_RESOURCE_TYPE: deployment

  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

stages:
  - test
  - build-app
  - build
  - deploy  # dummy stage to follow the template guidelines
  - review
  - dast
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

build-app:
  image: ruby:2.5.8-alpine3.12
  stage: build-app
  variables:
    #RAILS_ROOT: /usr/src/app
    RAILS_ENV: production
    BUNDLE_APP_CONFIG: /usr/src/app/.bundle
    BUILD_PACKAGES: "build-base curl-dev git"
    DEV_PACKAGES: "postgresql-dev sqlite-libs sqlite-dev yaml-dev zlib-dev nodejs yarn"
    RUBY_PACKAGES: "tzdata"
  script:
    - apk update && apk upgrade && apk add --update --no-cache $BUILD_PACKAGES $DEV_PACKAGES $RUBY_PACKAGES
    - bundle config --global frozen 1 && bundle install --deployment --without development:test:assets --path=vendor/bundle -j4 && rm -rf vendor/bundle/ruby/2.5.0/cache/*.gem && find vendor/bundle/ruby/2.5.0/gems/ -name "*.c" -delete && find vendor/bundle/ruby/2.5.0/gems/ -name "*.o" -delete
    - rm -rf tmp/cache spec
  cache:
    paths:
      - vendor/bundle
    key: gems
  artifacts:
    untracked: true
    expire_in: 1h
  needs: []

build:
  stage: build
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v0.4.0"
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.8-dind
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - /build/build.sh
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
  needs:
    - "build-app"


include:
 # - template: Jobs/Build.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Build.gitlab-ci.yml
  - template: Jobs/Deploy.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml

test:
  stage: test
  image: ruby:2.5
  script:
  - apt-get update -qq && apt-get install -y -qq sqlite3 libsqlite3-dev nodejs
  - bundle install --path=vendor/bundle
  - bundle exec rake db:create RAILS_ENV=test
  - bundle exec rake test & bundle exec rspec # & bundle exec rubocop
  except:
    variables:
      - $CD_TEST_IGNORE
  cache:
    paths:
      - vendor/bundle
    key: gems
